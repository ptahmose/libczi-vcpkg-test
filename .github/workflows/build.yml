name: Build and Test libCZI-vcpkg

on:
  push:
    branches: ["master", "main"]
  pull_request:
    branches: ["master", "main"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test_on_windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: run tests on Windows-x64
        shell: bash
        run: |
          bash ./run_test.sh

  test_on_linux:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: run tests on Linux-x64
        shell: bash
        run: |
          bash ./run_test.sh

  test_on_macos:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-13, macos-14]  # Intel + Apple Silicon
    steps:
      - uses: actions/checkout@v4
      - name: run tests on ${{ matrix.os }}
        shell: bash
        run: |
          bash ./run_test.sh

  test_on_alpine_x64:
    runs-on: ubuntu-latest
    container:
      image: alpine:latest
    steps:
      - name: Install toolchain & deps for vcpkg/CMake
        run: |
          apk update
          apk add --no-cache \
            bash git curl zip unzip tar ca-certificates \
            build-base pkgconf cmake ninja linux-headers

      # checkout AFTER git is installed in the container
      - uses: actions/checkout@v4

      - name: Run tests on Alpine x64 (musl)
        shell: bash
        run: |
          bash ./run_test.sh


#  test_on_linux_qemu:
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        include:
#          - arch: aarch64
#            distro: ubuntu_latest
#            name: linux-arm64
#          - arch: riscv64
#            distro: ubuntu_latest
#            name: linux-riscv64
#    name: Run tests on ${{ matrix.name }} (QEMU)
#    steps:
#      - uses: actions/checkout@v4
#      - name: Run on ${{ matrix.name }}
#        uses: uraimo/run-on-arch-action@v3
#        with:
#          arch: ${{ matrix.arch }}
#          distro: ${{ matrix.distro }}
#          dockerRunArgs: |
#            --volume "${{ github.workspace }}:/workspace"
#            --workdir /workspace
#          # Install prerequisites for vcpkg/CMake/Ninja on both Debian/Ubuntu and Alpine
#          install: |
#            if command -v apk >/dev/null 2>&1; then
#              # Alpine (musl)
#              apk update
#              apk add --no-cache \
#                bash git curl zip unzip tar ca-certificates \
#                build-base pkgconf cmake ninja
#            else
#              # Debian/Ubuntu (glibc)
#              apt-get update
#              DEBIAN_FRONTEND=noninteractive apt-get install -y \
#                bash git curl zip unzip tar ca-certificates \
#                build-essential pkg-config cmake ninja-build
#            fi
#          run: |
#            # Ensure we're using bash (Alpine default is /bin/sh)
#            bash ./run_test.sh
